---------------------------------------------------------------------------------------------------------------------------------------------------|
|  BLOQUE 02 - SECCIÓN 34 - CONVERSIÓN DE OBJETOS EN JAVA 
|  VIDEOS: 124, 125.
---------------------------------------------------------------------------------------------------------------------------------------------------|

Conversión de objetos (Video 124, 125).
	
	Una variable de cierto tipo puede apuntar distintos tipos, siempre y cuando haya una relación entre ellos. 
	En la imágen "01 - Conversión de objetos.png" podemos ver que una variable de tipo Empleado, puede almacenar referencias de objetos de tipo 
	Empleado, o cualquier subclase, como puede ser Gerente, Escritor, Corrector, etc.
	
	El objetivo de convertir objetos es poder acceder a los métodos de cada objeto según necesitemos.
	
	Hay dos tipos de conversión de objetos según sea el nuevo nivel de jerarquía que se le vaya a asignar a la variable de tipo objeto y son:
	
	1) Downcasting: Realizar una conversión de una variable de tipo objeto que sea por ejemplo una clase padre y luego se le asigna una clase hija o 
								  una clase nieta, por lo que baja en cuanto a la jerarquía de clases.
								  
								  El downcasting no se realiza de manera automática, y es necesario especificar cual es el tipo al que queremos convertir, y de 
								  hecho en caso de realizar una conversión errónea se lanzará una excepción de tipo ClassCastException. Por ello, para realizar un
								  downcasting solo debemos especificar entre paréntesis "()" el tipo al cual deseamos convertir nuestro tipo de dato, y con ello 
								  tendremos un tipo de dato que por consiguiente ya incluye todas las características del tipo más específico recién convertido.
									
									// Declaración de variable de tipo objeto Empleado y apunta a un objeto de tipo Escritor.
								  Empleado empleado = new Escritor("Alfonso", 5000, TipoEscritura.CLASICO);
								  
									Cuando se realiza un downcasting, lo único que sucede es que ya no es posible acceder a los métodos creados en la clase hija, sino 
									que solo están disponibles los métodos de la clase padre. Por ello, si quisiéramos mandar a llamar algún método de la clase 
									Escritor directamente, no sería posible ya que la variable que estamos usando es de un tipo superior, y no puede acceder 
									directamente a los métodos de la clase de menor jerarquía.
								  
								  resultado = empleado.getTipoEscritura() -> esto no es posible, al ser un método de la clase hija "Escritor".
								  
								  // Se llama al método "obtenerDetalles()" y utilizará el método sobreescrito que se encuentra en la clase hijo "Escritor" ya que 
								  // la variable "empleado" tiene los datos del objeto "Escritor" y no los datos del objeto "Empleado".
									System.out.println("Datos: " + empleado.obtenerDetalles());
		
								  // Convierte objeto (Downcasting): Esta convirtiendo una variable objeto de tipo Empleado (Clase Padre) en una variable de tipo 
								  // Escritor (Clase Hijo).
								  Escritor escritor = (Escritor) empleado;
								  
								  Una vez convertida la variable en tipo Escritor, ahora si podemos acceder a los métodos de la clase hija "Escritor".
								  
								  resultado = escritor.getTipoEscritura();
								  
	2) Upcasting: Realizar una conversión de una variable de tipo objeto nieta y luego se le asigna una clase padre o abuelo, por lo que sube en 
							  cuanto a la jerarquía de clases.
							  Se tiene acceso a los métodos tanto de la clase padre como de la clase hija.
							  
							  El upcasting se realiza de manera automática, y no hay necesidad de escribir algún código de manera explícita, debido a que si es
								un tipo superior, en automático se realiza la conversión, esto es muy similar a los tipos primitivos en Java y la conversión entre
								ellos. Por ello, no es necesario indicar entre () la clase a la que se quiere convertir la variable de tipo objeto.
								
							  // Caso de Upcasting: Está convirtiendo una variable objeto de tipo Escritor (Clase Hija) en una variable de tipo Empleado (Clase Padre).
								Esta sentencia: Empleado empleado2 = (Empleado) escritor; es igual a esta sentencia: Empleado empleado2 = escritor;
							  
								// Se llama al método "obtenerDetalles()" y utilizará el método sobreescrito que se encuentra en la clase hijo "Escritor" ya que 
								// la variable "empleado" tiene los datos del objeto "Escritor" y no los datos del objeto "Empleado".
								System.out.println("Datos: " + empleado2.obtenerDetalles());