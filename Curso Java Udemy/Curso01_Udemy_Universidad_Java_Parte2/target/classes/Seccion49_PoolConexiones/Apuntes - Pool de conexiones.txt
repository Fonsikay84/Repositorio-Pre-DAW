---------------------------------------------------------------------------------------------------------------------------------------------------|
|  BLOQUE 03 - SECCIÓN 49 - POOL DE CONEXIONES CON JDBC EN JAVA. 
|  VIDEOS: 192, 193
---------------------------------------------------------------------------------------------------------------------------------------------------|

1. Pool de conexiones (Video 192).

	Un Pool de conexiones nos permite agilizar el proceso de obtener una conexión por cada clase Java que necesita de una conexión ya que el 
	objetivo del pull de conexiones precisamente es tener listas varias conexiones a la base de datos de manera que sea mucho más eficiente el 
	proceso de obtener y liberar una conexión a la base de datos.
	
	De hecho el proceso de administración de una conexión se delega al pull de conexiones por lo que podemos dejar de preocuparnos por abrir y 
	cerrar una conexión ya que este tipo de tareas entre otras se encargará precisamente el pull de conexiones.
	
	Un Pool de conexiones puede crearse de varias maneras:
	
		- Directamente por código Java que nosotros desarrollemos y que debemos de mantener.
		- Utilizar algún proyecto como el proyecto de JDBC de Apache llamado Apache Commons que es el que utilizamos en este curso.
		- Apoyándonos del servidor de aplicaciones Java cómo puede ser Tomcat, Glassfish, etc.
		
2. Uso del proyecto Apache Commons (Video 193).

	El proyecto Apache Commons es un proyecto de Apache que contiene varias librerías que, como su nombre lo dice, son comunes para todos los 
	proyectos Java y vamos a utilizar el proyecto de "Apache Commons DBCP2" para poder manejar el concepto de pool de conexiones.
	
	Para agregar el proyecto Apache Commons hay que modificar el archivo "pom.xml" añadiendo una nueva dependencia:
	
	  <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-dbcp2</artifactId>
      <version>2.7.0</version>
    </dependency>
	
	Una vez que se ha agregado el proyecto Apache a nuestro proyecto hay que realizar los cambios pertinentes en la clase "Conexion_BBDD" y son
	los siguientes:
	
		1) Se declara una variable de tipo "BasicDataSource".
		
		  // Variable para el Pool de conexiones.
  		private BasicDataSource pool = null;
  	
  	2) Se crea un método llamado "getDataSource" que retorna un objeto "DataSource" para inicializar el Pool de 5 conexiones.
  	
  	  // Creación del método para inicializar el Pool de conexiones.
		  public DataSource getDataSource()
		  {
		  	// Si no se ha creado ningun Pool de conexiones, se crea.
		  	if (pool == null)
		  	{
		  	
			  	// Número de conexiones a abrir con el Pool.
			  	int numPoolConexiones = 5;
			  	
			  	// Creamos un objeto de tipo BasicDataSource.
			  	pool = new BasicDataSource();
			  	
			  	// Le asignamos las variables de la URL, Usuario y clave de la BBDD a conectar.
			  	pool.setUrl(this.url);
			  	pool.setUsername(usuario);
			  	pool.setPassword(clave);
			  	
			  	// Definimos el tamaño inicial del Pool de conexiones.
			  	pool.setInitialSize(numPoolConexiones);
			  
		  	}
		  	// Retorna el pool.
		  	return pool;
		  	
		  }
		  
  	3) En el método "crearConexionBBDD()" ya no se llama al método "DriverManager.getConnection()" sino ahora se utiliza el método creado 
  		 "getDataSource()" y se le añade el método "getConnection()".
  		 
  		 // Se crea un objeto de tipo Conexion donde se pasa la url, el usuario y la clave de la BBDD usando el Pool de conexiones "getDataSource()".
       this.conexion = getDataSource().getConnection();
       
	El código de la clase "Conexion_BBDD" actualizada es el siguiente:
	
		import java.sql.Connection;
		import java.sql.PreparedStatement;
		import java.sql.ResultSet;
		import java.sql.SQLException;
		
		import javax.sql.DataSource;
		
		import org.apache.commons.dbcp2.BasicDataSource;
		
		// Declaración de la clase para la conexión con las BBDD de MySQL y Oracle.
		public class Conexion_BBDD 
		{
		  
		  // Declaración de los atributos de la clase.
		  
		  // Tipo de BBDD a conectar.
		  private String tipoBBDD;
		  // Creación del objeto de conexión de BBDD.
		  private Connection conexion;
		  // Cadena de conexión a la BBDD.
		  private String url;
		  // Usuario de la BBDD.
		  private String usuario; 
		  // Contraseña de la BBDD.
		  private String clave;
		  // Valor de Class.forName().
		  private String classforname;
		  // Variable para el Pool de conexiones.
		  private BasicDataSource pool = null;
		  
		  // Declaración del constructor para inicializar los atributos de clase utilizados para la conexión con la BBDD.
		  public Conexion_BBDD(String tipoBBDD)
		  {
		    // Se carga el atributo de clase con el valor que le venga en la creación del objeto de la clase "Conexion_BBDD".
		    this.tipoBBDD = tipoBBDD;
		    
		    // Segón sea la BBDD a conectar, pues se carga las variables necesarias para la conexión con dicha BBDD.
		    switch (this.tipoBBDD) 
		    {
		      
		      // Variables para la conexión con la BBDD de MySQL.
		      case "MySQL":
		        this.conexion = null;
		        this.url = "jdbc:mysql://localhost:3306/test?useSSL=false&useTimezone=true&serverTimezone=UTC&allowPublicKeyRetrieval=true";
		        this.usuario = "root";
		        this.clave = "admin"; 
		        this.classforname = "com.mysql.cj.jdbc.Driver";
		        break; 
		        
		      // Variables para la conexión con la BBDD de Oracle.
		      case "Oracle":
		        this.conexion = null;
		        this.url = "jdbc:oracle:thin:@localhost:1521:xe";
		        this.usuario = "Curso_Java";
		        this.clave = "1234"; 
		        this.classforname = "oracle.jdbc.driver.OracleDriver";
		        break; 
		    }
		  }
		  
		  // Se crea el método en el cual se realiza la conexión con la BBDD.
		  public Connection crearConexionBBDD()
		  {
		    // Se mete el código en un bloque "try catch".
		    try 
		    {
		      
		      Class.forName(this.classforname);
		      
		      // Se crea un objeto de tipo Conexion donde se pasa la url, el usuario y la clave de la BBDD usando el Pool de conexiones "getDataSource()".
		      this.conexion = getDataSource().getConnection();  
		      
		      // Se informa si la conexión a la BBDD ha sido correcta o no.
		      if (this.conexion != null) 
		      {
		      	System.out.println("\nINFORMACIÓN: BBDD " + this.tipoBBDD + " - Conexión exitosa.");
		      }
		      else
		      {
		        System.out.println("\nERROR: BBDD " + this.tipoBBDD + " - Conexión errónea.");
		      }
		    }
		    // Si llega un mensaje de error, se muestra por consola.
		    catch (ClassNotFoundException | SQLException w_error) 
		    {
		      System.out.println("\nERROR: BBDD " + this.tipoBBDD + " - Conexión errónea: " + w_error.getMessage());
		    }    
		    // Se retorna el objeto tipo conexión.
		    return this.conexion;
		  }
		
		  // Creación del método para inicializar el Pool de conexiones.
		  public DataSource getDataSource()
		  {
		  	// Si no se ha creado ningun Pool de conexiones, se crea.
		  	if (pool == null)
		  	{
		  	
			  	// Número de conexiones a abrir con el Pool.
			  	int numPoolConexiones = 5;
			  	
			  	// Creamos un objeto de tipo BasicDataSource.
			  	pool = new BasicDataSource();
			  	
			  	// Le asignamos las variables de la URL, Usuario y clave de la BBDD a conectar.
			  	pool.setUrl(this.url);
			  	pool.setUsername(usuario);
			  	pool.setPassword(clave);
			  	
			  	// Definimos el tamaño inicial del Pool de conexiones.
			  	pool.setInitialSize(numPoolConexiones);
			  
		  	}
		  	// Retorna el pool.
		  	return pool;
		  	
		  }
		
		  // Creación del método para cerrar el registro de tipo "ResultSet".
		  public void cerrar(ResultSet registro)
		  {
		  	// Se mete el código en un bloque "try catch".
		  	try 
		  	{
		  		// Se cierra el registro de tipo "ResultSet".
		  		registro.close();            
		  	} 
		  	// Si llega un mensaje de error, se muestra por consola.
		  	catch (SQLException w_error) 
		  	{
		  		System.out.println("\nERROR: BBDD " + this.tipoBBDD + " - Error de desconexión ResultSet: " + w_error.getMessage());
		  	}
		  }
		
		  // Creación del método para cerrar la instrucción de tipo "PreparedStatement".
		  public void cerrar(PreparedStatement instruccion)
		  {
		    // Se mete el código en un bloque "try catch".
		    try 
		    {
		      // Se cierra la instrucción de tipo "PreparedStatement".
		    	instruccion.close();            
		    } 
		    // Si llega un mensaje de error, se muestra por consola.
		    catch (SQLException w_error) 
		    {
		      System.out.println("\nERROR: BBDD " + this.tipoBBDD + " - Error de desconexión PreparedStatement: " + w_error.getMessage());
		    }
		  }
		  
		  // Creación del método para desconectar la conexión de BBDD.
		  public void desconexion()
		  {
		    // Se mete el código en un bloque "try catch".
		    try 
		    {
		      // Se cierra la conexión con la BBDD.
		      this.conexion.close();      
		    } 
		    // Si llega un mensaje de error, se muestra por consola.
		    catch (SQLException w_error) 
		    {
		      System.out.println("\nERROR: BBDD " + this.tipoBBDD + " - Error de desconexión: " + w_error.getMessage());
		    }
		  }
		}
