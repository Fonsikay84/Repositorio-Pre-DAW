---------------------------------------------------------------------------------------------------------------------------------------------------|
|  BLOQUE 03 - SECCIÓN 45 - INTRODUCCIÓN A JDBC EN JAVA. 
|  VIDEOS: 172, 173, 174, 175
---------------------------------------------------------------------------------------------------------------------------------------------------|

1. Añadir los conectores de BBDD tanto de MySQL y Oracle al proyecto Java.

	- Las dos librerias que hay que importar para que pueda conectar con las BBDD son:
	
		* Conector MySQL: mysql-connector-j-8.0.33.jar
		* Conector Oracle: ojdbc11.jar
		
		Estas dos librerías se encuentran en la misma carpeta donde 
		
	- Para importarlas al proyecto, hay que realizar las siguientes acciones:
	
		1) Botón derecho sobre el nombre del proyecto -> Properties -> Java Build Path -> Libraries -> Pulsar en "Add External JARs.." -> Se busca las
			 dos librerias en esta misma carpeta y se debe de añadir correctamente al proyecto.
		2) En el archivo "pom.xml" del proyecto Maven se debe de incluir las siguientes líneas justo antes del comando "</project>" y se guarda:
	
			<dependencies>
		    <dependency>
		      <groupId>mysql</groupId>
		      <artifactId>mysql-connector-java</artifactId>
		      <version>8.0.23</version>
		    </dependency>
		    <dependency>
		      <groupId>com.oracle.database.jdbc</groupId>
		      <artifactId>ojdbc10</artifactId>
		      <version>19.3.0.0</version>
		    </dependency>
		  </dependencies>
		
		Una vez que ya tenemos los enlaces creados entre las BBDD y Eclipse, pues hay que crear la clase "Conexion_BBDD.java" para realizar la 
		conexión.
		
2. Creación de la clase "Conexion_BBDD", la cual nos va a permitir tener una conexión con la BBDD tanto de MySQL como de Oracle.

	import java.sql.Connection;
	import java.sql.DriverManager;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;
	import java.sql.SQLException;

	// Declaración de la clase para la conexión con las BBDD de MySQL y Oracle.
	public class Conexion_BBDD 
	{
	  
	  // Declaración de los atributos de la clase.
	  
	  // Tipo de BBDD a conectar.
	  private String tipoBBDD;
	  // Creación del objeto de conexión de BBDD.
	  private Connection conexion;
	  // Cadena de conexión a la BBDD.
	  private String url;
	  // Usuario de la BBDD.
	  private String usuario; 
	  // Contraseña de la BBDD.
	  private String clave;
	  // Valor de Class.forName().
	  private String classforname;
	  
	  // Declaración del constructor para inicializar los atributos de clase utilizados para la conexión con la BBDD.
	  public Conexion_BBDD(String tipoBBDD)
	  {
	    // Se carga el atributo de clase con el valor que le venga en la creación del objeto de la clase "Conexion_BBDD".
	    this.tipoBBDD = tipoBBDD;
	    
	    // Segón sea la BBDD a conectar, pues se carga las variables necesarias para la conexión con dicha BBDD.
	    switch (this.tipoBBDD) 
	    {
	      
	      // Variables para la conexión con la BBDD de MySQL.
	      case "MySQL":
	        this.conexion = null;
	        this.url = "jdbc:mysql://localhost:3306/test?useSSL=false&useTimezone=true&serverTimezone=UTC&allowPublicKeyRetrieval=true";
	        this.usuario = "root";
	        this.clave = "admin"; 
	        this.classforname = "com.mysql.cj.jdbc.Driver";
	        break; 
	        
	      // Variables para la conexión con la BBDD de Oracle.
	      case "Oracle":
	        this.conexion = null;
	        this.url = "jdbc:oracle:thin:@localhost:1521:xe";
	        this.usuario = "Curso_Java";
	        this.clave = "1234"; 
	        this.classforname = "oracle.jdbc.driver.OracleDriver";
	        break; 
	    }
	  }
	  
	  // Se crea el método en el cual se realiza la conexión con la BBDD.
	  public Connection crearConexionBBDD()
	  {
	    // Se mete el código en un bloque "try catch".
	    try 
	    {
	      
	      Class.forName(this.classforname);
	      
	      // Se crea un objeto de tipo Conexion donde se pasa la url, el usuario y la clave de la BBDD.
	      this.conexion = DriverManager.getConnection(this.url, this.usuario, this.clave);  
	      
	      // Se informa si la conexión a la BBDD ha sido correcta o no.
	      if (this.conexion != null) 
	      {
	        System.out.println("BBDD " + this.tipoBBDD + " - Conexión exitosa.");
	      }
	      else
	      {
	        System.out.println("BBDD " + this.tipoBBDD + " - Conexión errónea.");
	      }
	    }
	    // Si llega un mensaje de error, se muestra por consola.
	    catch (ClassNotFoundException | SQLException w_error) 
	    {
	      System.out.println("BBDD " + this.tipoBBDD + " - Conexión errónea: " + w_error.getMessage());
	    }    
	    // Se retorna el objeto tipo conexión.
	    return this.conexion;
	  }
	
	  // Creación del método para cerrar el registro de tipo "ResultSet".
	  public void cerrar(ResultSet registro)
	  {
	  	// Se mete el código en un bloque "try catch".
	  	try 
	  	{
	  		// Se cierra el registro de tipo "ResultSet".
	  		registro.close();            
	  	} 
	  	// Si llega un mensaje de error, se muestra por consola.
	  	catch (SQLException w_error) 
	  	{
	  		System.out.println("BBDD " + this.tipoBBDD + " - Error de desconexión ResultSet: " + w_error.getMessage());
	  	}
	  }
	
	  // Creación del método para cerrar la instrucción de tipo "PreparedStatement".
	  public void cerrar(PreparedStatement instruccion)
	  {
	    // Se mete el código en un bloque "try catch".
	    try 
	    {
	      // Se cierra la instrucción de tipo "PreparedStatement".
	    	instruccion.close();            
	    } 
	    // Si llega un mensaje de error, se muestra por consola.
	    catch (SQLException w_error) 
	    {
	      System.out.println("BBDD " + this.tipoBBDD + " - Error de desconexión PreparedStatement: " + w_error.getMessage());
	    }
	  }
	  
	  // Creación del método para desconectar la conexión de BBDD.
	  public void desconexion()
	  {
	    // Se mete el código en un bloque "try catch".
	    try 
	    {
	      // Se cierra la conexión con la BBDD.
	      conexion.close();
	      // Se informa que la conexión a la BBDD ha sido correcta.
	      System.out.println("BBDD " + this.tipoBBDD + " - Desconexión exitosa.");
	      
	    } 
	    // Si llega un mensaje de error, se muestra por consola.
	    catch (SQLException w_error) 
	    {
	      System.out.println("BBDD " + this.tipoBBDD + " - Error de desconexión: " + w_error.getMessage());
	    }
	  }
	}

2. Uso de la clase "Conexion_BBDD".

2.1. La Base de datos es MySQL.

	import java.sql.*;
	
	public class PruebaConexionMySQL 
	{
	  public static void main(String[] args) 
	  {
	  	
	    // Se crea un objeto de tipo "Conexion_MySQL" que se va a utilizar para la conexión con la BBDD indicando que la BBDD va a ser MySQL.
	    Conexion_BBDD conexionMySQL = new Conexion_BBDD("MySQL");
	        
	    // Se mete el código en un bloque "try catch".
	    try 
	    {
	    	
	    	// Se llama al método que realiza la conexión con la BBDD de MySql.
	      Connection conexion = conexionMySQL.crearConexionBBDD();
	      
	    	// Declaración de variables que van a contener cada una de las sentencias a ejecutar.
	      String sql = "SELECT idpersona, nombre, apellidos, email, telefono FROM persona";
	      
	      // Se crea la sentencia que se va a lanzar en la BBDD.
	      PreparedStatement instruccion = conexion.prepareStatement(sql);
	      
	      // Se lanza la sentencia en BBDD y se guarda el resultado.
	      ResultSet resultado = instruccion.executeQuery(sql);
	      
	      System.out.println("\nDATOS DE LA PERSONA\n");
	      
	      // Se recorre todos los registros recuperados, se muestran por consola y se muestra por pantalla.
	      while(resultado.next())
	      {
	        System.out.println("- ID Persona: " + resultado.getInt("idpersona"));
	        System.out.println("- Nombre: " + resultado.getString("nombre"));
	        System.out.println("- Apellidos: " + resultado.getString("apellidos"));
	        System.out.println("- Email: " + resultado.getString("email"));
	        System.out.println("- Teléfono: " + resultado.getString("telefono") + "\n");
	      }
	      
	      // Se cierran las conexiones.
	      conexionMySQL.cerrar(resultado);
	      conexionMySQL.cerrar(instruccion);
	      conexionMySQL.desconexion();
	
	    } 
	    // Si llega un mensaje de error, se muestra por consola.
	    catch (SQLException ex) 
	    {
	      System.out.println("ERROR SQL: " + ex.getMessage());
	    }
	  } 
	}


2.2. La Base de datos es Oracle.

	import java.sql.Connection;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;
	import java.sql.SQLException;
	import java.util.ArrayList;
	import java.util.List;
	
	// Declaración de la clase DAO de Persona.
	public class PersonaDAO 
	{
		
		// Declaración de variables que van a contener cada una de las sentencias a ejecutar.
		
		private static final String SQL_SELECT = "SELECT idPersona, nombre, apellidos, email, telefono FROM persona";
		
		// Declaración de los métodos.
		
		// Declaración del método que va a realizar la consulta completa a la tabla de Persona y la va a guardar en una lista de tipo "Persona".
		public List<Persona> consultaPersona()
		{
			
		// Definición de las variables.
			
			// Se crea un objeto de tipo "Conexion_Oracle" que se va a utilizar para la conexión con la BBDD indicando que la BBDD va a ser Oracle.
			Conexion_BBDD conexionOracle = new Conexion_BBDD("Oracle");
			// Se crea un objeto de tipo "Connection" para almacenar la conexión con la BBDD.
			Connection conexion = null;
			// Almacena la sentencia que se va a ejecutar en la BBDD.
			PreparedStatement instruccion = null;
			// Almacena un registro de la tabla Persona.
			ResultSet registro = null;		
			// Se crea un objeto de tipo Persona para almacenar cada registro recuperado de la tabla Persona.
			Persona registroPersona = null;
			// Se crea una lista de tipo Persona para almacenar todos los registros recuperados de la tabla Persona.
			List<Persona> listaPersonas = new ArrayList<Persona>();
	
	    // Se mete el código en un bloque "try catch" para contemplar el error "SQLException".
	    try 
			{
	    	
	      // Se llama al método que realiza la conexión con la BBDD de Oracle y se devuelve el objeto de tipo Connection a la variable "conexión". 
	      conexion = conexionOracle.crearConexionBBDD();
	      
	    	// Se crea la sentencia que se va a lanzar en la BBDD.
	    	instruccion = conexion.prepareStatement(SQL_SELECT);
				
	    	// Se lanza la sentencia en BBDD y se guarda el resultado.
	    	registro = instruccion.executeQuery();
				
	    	System.out.println("\n-------------------");
				System.out.println("DATOS DE LA PERSONA");
				System.out.println("-------------------\n");
				
				// Se recorre todos los registros recuperados, se muestran por consola y se añade cada registro en la lista de Persona.
				while(registro.next() == true)
				{
					
					// Se guarda cada campo en una variable para luego usarla.
					int 	 reg_idPersona 	= registro.getInt("idpersona");
					String reg_nombre 		= registro.getString("nombre");
					String reg_apellidos 	= registro.getString("apellidos");
					String reg_email 			= registro.getString("email");
					String reg_telefono 	= registro.getString("telefono");
	        
	        // Se crea un objeto de tipo Persona utilizando el constructor completo.
	        registroPersona = new Persona(reg_idPersona, 
														        		reg_nombre, 
														        		reg_apellidos, 
														        		reg_email, 
														        		reg_telefono);
	        
	        // Se añade cada registro de la tabla Persona en la lista "listaPersonas".
	        listaPersonas.add(registroPersona);
	        
	        // Se imprime los datos por consola.
	        registroPersona.toString();
				}			
			} 
			// Si llega un mensaje de error, se muestra por consola.
			catch (SQLException w_error) 
			{
				System.out.println("ERROR SQL: " + w_error.getMessage());
			}
	    // Se cierra todas las conexiones.
			finally
			{			
				// Se cierra el registro, la instrucción y se desconecta de la BBDD.
				conexionOracle.cerrar(registro);
				conexionOracle.cerrar(instruccion);
				conexionOracle.desconexion();
			}
	    
	    // Se retorna la lista de registros de la tabla Persona.
			return listaPersonas;
		}
	}

